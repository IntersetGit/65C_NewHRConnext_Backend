// Prisma schema file.
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }
model Company {
  id          String          @unique @db.Uuid
  name        String          @db.VarChar(255)
  companyCode String          @unique
  address     String          @db.VarChar(255)
  city        String          @db.VarChar(255)
  state       String          @db.VarChar(255)
  zip         String          @db.VarChar(255)
  country     String?         @db.VarChar(255)
  icon        String?
  phone       String?         @db.VarChar(255)
  website     String?         @db.VarChar(255)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  ownerId     String          @db.Uuid
  owner       User            @relation(fields: [ownerId], references: [id])
  branch      CompanyBranch[]
}

model CompanyBranch {
  id           String     @unique @db.Uuid
  isMainbranch Boolean    @default(false)
  name         String     @db.VarChar(255)
  address      String     @db.VarChar(255)
  city         String     @db.VarChar(255)
  state        String     @db.VarChar(255)
  zip          String     @db.VarChar(255)
  country      String?    @db.VarChar(255)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  company      Company?   @relation(fields: [companyId], references: [id])
  companyId    String?    @db.Uuid
  users        User[]
  positions    Position[]
}

model Profile {
  id         String    @unique @db.Uuid
  bio        String?
  firstname  String?   @db.VarChar(255)
  lastname   String?   @db.VarChar(255)
  avatar     String?
  dob        DateTime?
  prefix     String?
  tel        String?
  address    String?
  gender     String?
  staff_code String?   @unique
  religion   String?
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @unique @db.Uuid
}

model User {
  id              String         @unique @db.Uuid
  email           String         @unique
  password        String
  profile         Profile?
  islogin         Boolean        @default(false)
  isActive        Boolean        @default(false)
  isOwner         Boolean        @default(false)
  lastlogin       DateTime?      @updatedAt
  createdAt       DateTime       @default(now())
  roleId          String?        @db.Uuid
  role            Role?          @relation(fields: [roleId], references: [id])
  positionId      String?        @db.Uuid
  company         Company[]
  companyBranch   CompanyBranch? @relation(fields: [companyBranchId], references: [id])
  companyBranchId String?        @db.Uuid
  Position        Position?      @relation(fields: [positionId], references: [id])
}

model Role {
  id    String @unique @db.Uuid
  name  String @db.VarChar(255)
  users User[]
}

model Position {
  id              String         @unique @db.Uuid
  name            String         @db.VarChar(255)
  access          Json
  users           User[]
  companyBranch   CompanyBranch? @relation(fields: [companyBranchId], references: [id])
  companyBranchId String?        @db.Uuid
}

model Province {
  id       String     @unique @db.Uuid
  name     String
  district District[]
}

model District {
  id         String   @unique @db.Uuid
  name       String
  provinceId String   @db.Uuid
  province   Province @relation(fields: [provinceId], references: [id])
  amphoe     Amphoe[]
}

model Amphoe {
  id         String   @unique @db.Uuid
  name       String
  districtId String   @db.Uuid
  zipcode    String?
  district   District @relation(fields: [districtId], references: [id])
}
