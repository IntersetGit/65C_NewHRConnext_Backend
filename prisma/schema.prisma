// Prisma schema file.
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }
model Company {
  id                      String               @unique @db.Uuid
  name                    String               @db.VarChar(255)
  companyCode             String               @unique
  userlimit               Int                  @default(0)
  company_registration_id String?
  company_vat_id          String?
  icon                    String?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  ownerId                 String               @db.Uuid
  owner                   User                 @relation(fields: [ownerId], references: [id])
  branch                  CompanyBranch[]
  mas_positionlevel3      mas_positionlevel3[]
  mas_positionlevel2      mas_positionlevel2[]
  mas_positionlevel1      mas_positionlevel1[]
  holiday_date            holiday_date[]
  mas_position            mas_position[]
}

model CompanyBranch {
  id                 String            @unique @db.Uuid
  isMainbranch       Boolean           @default(false)
  name               String            @db.VarChar(255)
  address            String            @db.VarChar(255)
  address_2          String?           @db.VarChar(255)
  city               String            @db.VarChar(255)
  state              String            @db.VarChar(255)
  zip                String            @db.VarChar(255)
  country            String?           @db.VarChar(255)
  tel                String?           @db.VarChar(255)
  fax                String?           @db.VarChar(255)
  website            String?           @db.VarChar(255)
  lat                String?
  lng                String?
  email              String?
  email_2            String?
  company_type       String?
  sub_company_typeId String?           @db.Uuid
  sub_company_type   SubBusinessType?  @relation(fields: [sub_company_typeId], references: [id])
  registeredamount   String?
  regis_vat          String?
  regiscomnumber     String?
  social_facebook    String?
  social_likedin     String?
  social_instragram  String?
  social_line        String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  company            Company?          @relation(fields: [companyId], references: [id])
  companyId          String?           @db.Uuid
  users              User[]
  Role_Company       Role_Company[]
  expense_company    expense_company[]
  main_business_id   String?           @db.Uuid
  main_business_type MainBusinessType? @relation(fields: [main_business_id], references: [id])
  photo_link         String?
  vat_link           String?
  certificate_link   String?
}

model Profile {
  id                     String              @unique @db.Uuid
  bio                    String?
  firstname_th           String?             @db.VarChar(255)
  lastname_th            String?             @db.VarChar(255)
  firstname_en           String?             @db.VarChar(255)
  lastname_en            String?             @db.VarChar(255)
  nickname               String?             @db.VarChar(255)
  blood_type             String?
  employee_status        String?
  start_date_work        DateTime?
  avatar                 String?
  dob                    DateTime?
  age                    String?
  relationship           String?
  shirt_size             String?
  prefix_th              String?
  prefix_en              String?
  citizen_id             String?
  social_id              String?
  staff_status           String?
  tel                    String?
  address                String?
  gender                 String?
  staff_code             String?             @unique
  religion               String?
  user                   User                @relation(fields: [userId], references: [id])
  userId                 String              @unique @db.Uuid
  citizen_addressnumber  String?
  citizen_address        String?
  citizen_country        String?
  citizen_province       String?
  citizen_district       String?
  citizen_state          String?
  citizen_zipcode        String?
  citizen_tel            String?
  contract_sameCitizen   Boolean             @default(false)
  contract_addressnumber String?
  contract_address       String?
  contract_country       String?
  contract_province      String?
  contract_district      String?
  contract_state         String?
  contract_zipcode       String?
  contract_email         String?
  contract_companyemail  String?
  social_facebook        String?
  social_likedin         String?
  social_line            String?
  social_telegram        String?
  masposition1_id        String?             @db.Uuid
  masposition2_id        String?             @db.Uuid
  masposition3_id        String?             @db.Uuid
  mas_positionlevel1     mas_positionlevel1? @relation(fields: [masposition1_id], references: [id])
  mas_positionlevel2     mas_positionlevel2? @relation(fields: [masposition2_id], references: [id])
  mas_positionlevel3     mas_positionlevel3? @relation(fields: [masposition3_id], references: [id])
}

model User {
  id                String              @unique @db.Uuid
  email             String              @unique
  password          String
  profile           Profile?
  islogin           Boolean             @default(false)
  isActive          Boolean             @default(false)
  isOwner           Boolean             @default(false)
  lastlogin         DateTime?           @updatedAt
  createdAt         DateTime            @default(now())
  roleId            String?             @db.Uuid
  role              Role?               @relation(fields: [roleId], references: [id])
  RoleCompanyID     String?             @db.Uuid
  company           Company[]
  companyBranch     CompanyBranch?      @relation(fields: [companyBranchId], references: [id])
  companyBranchId   String?             @db.Uuid
  Role_Company      Role_Company?       @relation(fields: [RoleCompanyID], references: [id])
  Position_user     Position_user[]     @relation("user")
  henchman          Position_user[]
  mas_all_collect   mas_all_collect[]
  salary            salary[]
  provident_log     provident_log[]
  bookbank_log      bookbank_log[]
  data_leave        data_leave[]
  cretedByfk        log_positionn[]
  read_bookbank_log read_bookbank_log[]
}

model Role {
  id    String @unique @db.Uuid
  name  String @db.VarChar(255)
  users User[]
}

model Role_Company {
  id              String         @unique @db.Uuid
  name            String         @db.VarChar(255)
  access          Json
  status          Int
  users           User[]
  companyBranch   CompanyBranch? @relation(fields: [companyBranchId], references: [id])
  companyBranchId String?        @db.Uuid
}

model Province {
  id       String     @unique @db.Uuid
  name     String
  district District[]
}

model District {
  id         String   @unique @db.Uuid
  name       String
  provinceId String   @db.Uuid
  province   Province @relation(fields: [provinceId], references: [id])
  amphoe     Amphoe[]
}

model Amphoe {
  id         String   @unique @db.Uuid
  name       String
  districtId String   @db.Uuid
  zipcode    String?
  district   District @relation(fields: [districtId], references: [id])
}

model mas_position {
  id        String   @unique @db.Uuid
  name      String
  level     Int      @db.SmallInt
  Company   Company? @relation(fields: [CompanyId], references: [id])
  CompanyId String?  @db.Uuid
}

model mas_positionlevel1 {
  id                 String               @unique @db.Uuid
  name               String
  level              Int                  @db.SmallInt
  code               String
  type               String
  mas_positionlevel2 mas_positionlevel2[]
  Company            Company?             @relation(fields: [CompanyId], references: [id])
  CompanyId          String?              @db.Uuid
  Position_user      Position_user[]
  Profile            Profile[]
}

model mas_positionlevel2 {
  id                 String               @unique @db.Uuid
  name               String
  level              Int                  @db.SmallInt
  code               String
  type               String
  positionlevel1_id  String?              @db.Uuid
  mas_positionlevel1 mas_positionlevel1?  @relation(fields: [positionlevel1_id], references: [id])
  mas_positionlevel3 mas_positionlevel3[]
  Company            Company?             @relation(fields: [CompanyId], references: [id])
  CompanyId          String?              @db.Uuid
  position_user      Position_user[]
  Profile            Profile[]
}

model mas_positionlevel3 {
  id                 String              @unique @db.Uuid
  name               String
  level              Int                 @db.SmallInt
  code               String
  type               String
  positionlevel2_id  String?             @db.Uuid
  mas_positionlevel2 mas_positionlevel2? @relation(fields: [positionlevel2_id], references: [id])
  Company            Company?            @relation(fields: [CompanyId], references: [id])
  CompanyId          String?             @db.Uuid
  Position_user      Position_user[]
  Profile            Profile[]
}

model Position_user {
  id                 String              @unique @db.Uuid
  user_id            String?             @db.Uuid
  date               DateTime?
  position1_id       String?             @db.Uuid
  position2_id       String?             @db.Uuid
  position3_id       String?             @db.Uuid
  role               String?
  headderId          String?             @db.Uuid
  header             User?               @relation(fields: [headderId], references: [id])
  user               User?               @relation("user", fields: [user_id], references: [id])
  mas_positionlevel1 mas_positionlevel1? @relation(fields: [position1_id], references: [id])
  mas_positionlevel2 mas_positionlevel2? @relation(fields: [position2_id], references: [id])
  mas_positionlevel3 mas_positionlevel3? @relation(fields: [position3_id], references: [id])
  log_position       log_positionn[]
}

model holiday_date {
  id           String   @unique @db.Uuid
  holiday_name String?
  day          Int
  month        Int
  year         Int
  Company      Company? @relation(fields: [CompanyId], references: [id])
  CompanyId    String?  @db.Uuid
  status       Int      @db.SmallInt
}

model holiday_year {
  id           String  @unique @db.Uuid
  day          Int
  month        Int
  year         Int
  holiday_name String?
}

model mas_bank {
  id              String            @unique @db.Uuid
  name            String
  bank_code       String
  expense_company expense_company[]
  bookbank_log    bookbank_log[]
  salary          salary[]
}

model mas_month {
  id              String            @unique @db.Uuid
  month_number    Int               @default(0) @db.SmallInt
  name            String
  expense_company expense_company[]
}

model mas_years {
  id   String @unique @db.Uuid
  name String
}

model mas_vat_socials {
  id             String   @unique @db.Uuid
  current_vat    Float
  current_social Float
  salary         salary[]
}

model mas_salary_status {
  id     String   @unique @db.Uuid
  no     Int
  name   String
  salary salary[]
}

model mas_income_type {
  id     String   @unique @db.Uuid
  name   String
  salary salary[]
}

model expense_company {
  id              String         @unique @db.Uuid
  monthId         String?        @db.Uuid
  bankId          String?        @db.Uuid
  date            DateTime
  vat_per         Float?
  ss_per          Float?
  check_vat       String[]
  exp_com_month   String?
  exp_com_years   String?
  cal_date_salary DateTime?
  unix            Int?
  unix_date       Int?
  companyBranchId String?        @db.Uuid
  salary          salary[]
  Mas_month       mas_month?     @relation(fields: [monthId], references: [id])
  mas_bank        mas_bank?      @relation(fields: [bankId], references: [id])
  CompanyBranch   CompanyBranch? @relation(fields: [companyBranchId], references: [id])
}

model salary {
  //รายรับ
  id                  String             @unique @db.Uuid
  month               String?
  years               String?
  date                DateTime?          @default(now())
  base_salary         Float?
  commission          Float?
  position_income     Float?
  ot                  Float?
  bonus               Float?
  special_income      Float?
  other_income        Float?
  travel_income       Float?
  bursary             Float? //เงินอุดหนุน
  welfare_money       Float? //เงินสวัสดิการ
  //รายการหัก
  vatper              Float?
  ss_per              Float?
  vat                 Float?
  social_security     Float?
  miss                Float?
  ra                  Float?
  late                Float?
  other               Float?
  provident_employee  Float?
  provident_company   Float?
  //รายรับรวม
  total_income        Float?
  //รายหักรวม
  total_expense       Float?
  //รายได้สุทธิ
  net                 Float?
  //ยอดรวมทั้งปีของสลิปเงินเดือน
  socialYears         Float?
  vatYears            Float?
  incomeYears         Float?
  create_by           String?            @db.Uuid
  create_date         DateTime?
  update_by           String?            @db.Uuid
  update_date         DateTime?
  userId              String?            @db.Uuid
  // bookbank_log       bookbank_log[]
  mas_income_typeId   String?            @db.Uuid
  bookbank_logId      String?            @db.Uuid //เรียกดู 
  mas_salary_statusId String?            @db.Uuid
  mas_bankId          String?            @db.Uuid
  mas_vat_socialsId   String?            @db.Uuid
  expense_companyId   String?            @db.Uuid
  provident_logId     String?            @db.Uuid
  provident_log       provident_log[]
  User                User?              @relation(fields: [userId], references: [id])
  bookbank_log        bookbank_log?      @relation(fields: [bookbank_logId], references: [id])
  mas_income_type     mas_income_type?   @relation(fields: [mas_income_typeId], references: [id])
  mas_salary_status   mas_salary_status? @relation(fields: [mas_salary_statusId], references: [id])
  mas_bank            mas_bank?          @relation(fields: [mas_bankId], references: [id])
  mas_vat_socials     mas_vat_socials?   @relation(fields: [mas_vat_socialsId], references: [id])
  expense_company     expense_company?   @relation(fields: [expense_companyId], references: [id])
}

model mas_all_collect {
  id                         String          @unique @db.Uuid
  user                       User            @relation(fields: [userId], references: [id])
  userId                     String          @unique @db.Uuid
  date                       DateTime?
  income_collect             Float?
  vat_collect                Float?
  social_secu_collect        Float?
  provident_collect_employee Float?
  provident_collect_company  Float?
  // bookbank_log               bookbank_log[]
  provident_log              provident_log[]
  // @@unique([id , userId])
}

//ใช้สำหรับเรียกดู bookbank ของ user วว่าเคยอัปเดท bookbank ไปกี่ครั้ง และแต่ละครั้งมีการปรับเปลี่ยนอะไรบ้าง //
model bookbank_log {
  id                String              @unique @db.Uuid
  date              DateTime
  mas_bankId        String?             @db.Uuid
  bank_number       String              @db.VarChar(50)
  all_collectId     String?             @db.Uuid
  base_salary       Float
  provident_com     Float               @default(0)
  provident_emp     Float               @default(0)
  accept_date       DateTime
  accept_month      Int?
  accept_years      Int?
  unix              Int?
  salary            salary[] //เรียกดู base salary
  // salaryId      String?      @db.Uuid
  // all_collect   all_collect? @relation(fields: [all_collectId], references: [id])
  mas_bank          mas_bank?           @relation(fields: [mas_bankId], references: [id])
  // salary        salary?      @relation(fields: [salaryId], references: [id])
  User              User?               @relation(fields: [userId], references: [id])
  userId            String?             @db.Uuid
  provident_log     provident_log[]
  read_bookbank_log read_bookbank_log[]
}

//ใช้สำหรับเรียกดูว่ามีการแก้ไขหรืออัปเดทอะไรไปบ้าง โดยจะเก็บเป็น log//
model read_bookbank_log {
  id            String    @unique @db.Uuid
  date          DateTime
  mas_bankId    String?   @db.Uuid
  bank_number   String    @db.VarChar(50)
  all_collectId String?   @db.Uuid
  base_salary   Float?
  provident_com Float?    @default(0)
  provident_emp Float?    @default(0)
  accept_date   DateTime
  accept_month  Int?
  accept_years  Int?
  unix          Int?
  update_by     String?
  update_date   DateTime?
  userId        String?   @db.Uuid
  bookbank_logId String?       @db.Uuid
  User          User?     @relation(fields: [userId], references: [id])

  bookbank_log   bookbank_log? @relation(fields: [bookbank_logId], references: [id])
  
}

model provident_log {
  id String @unique @db.Uuid

  User              User?            @relation(fields: [userId], references: [id])
  userId            String?          @db.Uuid
  provident_date    DateTime?
  pro_employee      Float?
  pro_company       Float?
  mas_all_collect   mas_all_collect? @relation(fields: [mas_all_collectId], references: [id])
  mas_all_collectId String?          @db.Uuid
  bookbank_log      bookbank_log?    @relation(fields: [bookbank_logId], references: [id])
  bookbank_logId    String?          @db.Uuid
  salary            salary?          @relation(fields: [salaryId], references: [id])
  salaryId          String?          @db.Uuid
}

//-------- ตาราง master ประเภทวันหยุด -----------//
model mas_leave_type {
  id         String       @unique @db.Uuid
  name       String
  orderby    Int          @db.SmallInt
  data_leave data_leave[]
}

//-------- ข้อมูลการลาของพนักงาน -------------//

model data_leave {
  id             String         @unique @db.Uuid
  leavetype_id   String         @db.Uuid
  mas_leave_type mas_leave_type @relation(fields: [leavetype_id], references: [id])
  start_date     DateTime
  end_date       DateTime
  quantity_day   Int
  quantity_hours Int
  detail_leave   String
  Status         Int            @db.SmallInt
  user_id        String         @db.Uuid
  user           User           @relation(fields: [user_id], references: [id])
  link_pdf       String?
}

//------------ เก็บ logabout positions -------------------------//
model log_positionn {
  id            String        @unique @db.Uuid
  positionId    String        @db.Uuid
  cretedBy      String        @db.Uuid
  creteddate    DateTime
  detail        String
  Position_user Position_user @relation(fields: [positionId], references: [id])
  cretedByfk    User          @relation(fields: [cretedBy], references: [id])
}

model MainBusinessType {
  id              String            @unique @db.Uuid
  name            String
  SubBusinessType SubBusinessType[]
  CompanyBranch   CompanyBranch[]
}

model SubBusinessType {
  id               String           @unique @db.Uuid
  name             String
  MainBId          String           @db.Uuid
  MainBusinessType MainBusinessType @relation(fields: [MainBId], references: [id])
  CompanyBranch    CompanyBranch[]
}
